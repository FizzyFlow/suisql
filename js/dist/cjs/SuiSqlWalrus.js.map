{
  "version": 3,
  "sources": ["../../src/SuiSqlWalrus.ts"],
  "sourcesContent": ["\n// import { BlobEncoder } from '@mysten/walrus-wasm';\n\n// import type { SuiClient } from '@mysten/sui/client';\n\n\nimport type { Signer } from '@mysten/sui/cryptography';\n\nimport { getFullnodeUrl } from '@mysten/sui/client';\n\n// import { WalrusClient } from \"./walrusSdk2\";\n// import type { WalrusClient } from '@mysten/walrus';\nimport SuiSqlLog from './SuiSqlLog';\n\nimport type { WalrusClient } from '@mysten/walrus';\n\nimport { blobIdIntFromBytes, blobIdToInt, blobIdFromInt } from './SuiSqlUtils';\n\nimport axios from 'axios';\n\n\nexport type SuiSqlWalrusWalrusClient = WalrusClient;\n\ntype SuiSqlWalrusParams = {\n    walrusClient?: WalrusClient,\n    currentWalletAddress?: string,\n    publisherUrl?: string,\n    aggregatorUrl?: string,\n    signer?: Signer,\n    network?: string, // sui network, 'mainnet', 'testnet', \n};\n\n\nconst N_SHARDS = 1000; // https://github.com/MystenLabs/ts-sdks/blob/main/packages/walrus/src/constants.ts\n                       // systemObjectId -> dynamicField ( SystemStateInnerV1 ) -> fields -> committee -> n_shards\n\nexport default class SuiSqlWalrus {\n    private signer?: Signer;\n\n    private walrusClient?: WalrusClient;\n    private currentWalletAddress?: string;\n\n    private publisherUrl?: string;\n    private aggregatorUrl?: string;\n\n    private canWrite: boolean = false;\n    private canRead: boolean = false;\n\n    constructor(params: SuiSqlWalrusParams) {\n        this.signer = params.signer;\n        this.currentWalletAddress = params.currentWalletAddress;\n        this.publisherUrl = params.publisherUrl;\n        this.aggregatorUrl = params.aggregatorUrl;\n        this.walrusClient = params.walrusClient;\n\n        if (!this.currentWalletAddress && this.signer) {\n            this.currentWalletAddress = this.signer.toSuiAddress();\n        }\n\n        if (!this.walrusClient && params.network) {\n            if (!this.aggregatorUrl) {\n                // we can use aggregator\n                if (params.network == 'testnet') {\n                    this.aggregatorUrl = 'https://aggregator.walrus-testnet.walrus.space';\n                }\n            }\n            if (!this.publisherUrl && this.currentWalletAddress) {\n                // we can use publisher if we know current user address\n                if (params.network == 'testnet') {\n                    this.publisherUrl = 'https://publisher.walrus-testnet.walrus.space';\n                }\n            }\n        }\n\n        if (!this.publisherUrl && !this.signer && this.currentWalletAddress) {\n            // we need publisher, as we can't write with walrusClient without signer\n            if (params.network == 'testnet') {\n                this.publisherUrl = 'https://publisher.walrus-testnet.walrus.space';\n            }\n        }\n\n        this.canWrite = false;\n        if (this.walrusClient) {\n            this.canRead = true;\n            if (this.signer) {\n                this.canWrite = true;\n            }\n            if (this.publisherUrl && this.currentWalletAddress) {\n                this.canWrite = true;\n            }\n        } else {\n            if (this.publisherUrl && this.currentWalletAddress) {\n                this.canWrite = true;\n            }\n            if (this.aggregatorUrl) {\n                this.canRead = true;\n            }\n        }\n\n        SuiSqlLog.log('SuiSqlWalrus instance', params, 'canRead:', this.canRead, 'canWrite:', this.canWrite);\n    }\n\n    async getStoragePricePerEpoch(size: number): Promise<bigint | null> {\n        const BYTES_PER_UNIT_SIZE = 1024 * 1024; // 1 MiB\n        const storageUnits = BigInt(Math.ceil(size / BYTES_PER_UNIT_SIZE));\n        const systemState = await this.walrusClient?.systemState();\n\n        if (systemState && systemState.storage_price_per_unit_size) {\n            const storagPricePerUnitSize = BigInt(systemState.storage_price_per_unit_size);\n            const periodPaymentDue = storagPricePerUnitSize * storageUnits;\n\n            return periodPaymentDue;\n        }\n\n        return null;\n    }\n\n    async getSystemObjectId(): Promise<string | null> {\n        if (!this.walrusClient) {\n            return null;\n        }\n\n        const systemObject = await this.walrusClient.systemObject();\n        return systemObject.id.id;\n    }\n\n    async getSystemCurrentEpoch(): Promise<number | null> {\n        if (!this.walrusClient) {\n            return null;\n        }\n\n        const systemState = await this.walrusClient?.systemState();\n        if (systemState && systemState.committee && systemState.committee.epoch) {\n            return systemState.committee.epoch;\n        }\n\n        return null;\n    }\n\n    // static async calculateBlobId(data: Uint8Array): Promise<bigint | null> {\n    //     if (!this.walrusClient) {\n    //         return null;\n    //     }\n\n    //     const { blobId } = await this.walrusClient.encodeBlob(data);\n    //     return blobId;\n\n    //     return null;\n    // }\n\n    async calculateBlobId(data: Uint8Array): Promise<bigint | null> {\n        if (!this.walrusClient) {\n            return null;\n        }\n\n        const { blobId } = await this.walrusClient.encodeBlob(data);\n        \n        if (blobId) {\n            return blobIdToInt(blobId);\n        }\n\n        return null;\n    }\n\n    getCurrentAddress() {\n        if (this.signer) {\n            return this.signer.toSuiAddress();\n        }\n        if (this.currentWalletAddress) {\n            return this.currentWalletAddress;\n        }\n        return null;        \n    }\n\n    async writeToPublisher(data: Uint8Array): Promise<{ blobId: bigint, blobObjectId: string } | null> {\n        const form = new FormData();\n        form.append('file', new Blob([data]));\n        \n        const publisherUrl = this.publisherUrl+'/v1/blobs?deletable=true&send_object_to='+this.getCurrentAddress();\n        SuiSqlLog.log('writing blob to walrus via publisher', form);\n\n        let res = null;\n        try {\n            res = await axios.put(publisherUrl, data);\n        } catch (e) {\n            SuiSqlLog.log('error writing to publisher', res, res?.data, (e as any)?.response?.data);\n            throw e;\n        }\n\n        // SuiSqlLog.log('walrus publisher response', res);\n\n        if (res && res.data && res.data.newlyCreated && res.data.newlyCreated.blobObject && res.data.newlyCreated.blobObject.id) {\n            SuiSqlLog.log('success', res.data);\n            return {\n                blobId: blobIdToInt(''+res.data.newlyCreated.blobObject.blobId),\n                blobObjectId: res.data.newlyCreated.blobObject.id,\n            };\n        }\n\n        throw new Error('Failed to write blob to walrus publisher');\n    }\n\n    async write(data: Uint8Array): Promise<{ blobId: bigint, blobObjectId: string } | null> {\n        if (this.publisherUrl && this.currentWalletAddress) {\n            return await this.writeToPublisher(data);\n        }\n        if (!this.walrusClient || !this.signer) {\n            return null;\n        }\n\n        SuiSqlLog.log('writing blob to walrus', data);\n\n        const { blobId, blobObject } = await this.walrusClient.writeBlob({\n            blob: data,\n            deletable: true,\n            epochs: 2,\n            signer: this.signer,\n            owner: this.signer.toSuiAddress(),\n            attributes: undefined,\n        });\n\n        const blobObjectId = blobObject.id.id;\n        const blobIdAsInt = blobIdToInt(blobId);\n\n        SuiSqlLog.log('walrus write success', blobIdAsInt, blobObjectId);\n\n        return { blobId: blobIdAsInt, blobObjectId };\n    }\n\n    async readFromAggregator(blobId: string): Promise<Uint8Array | null> {\n        const asString = blobIdFromInt(blobId);\n        const url = this.aggregatorUrl+\"/v1/blobs/\" + asString;\n\n        SuiSqlLog.log('reading blob from walrus (Aggregator)', blobId);\n\n        const res = await axios.get(url, { responseType: 'arraybuffer' });\n\n        return new Uint8Array(res.data);\n    }\n\n    async read(blobId: string): Promise<Uint8Array | null> {\n        if (this.aggregatorUrl) {\n            return await this.readFromAggregator(blobId);\n        }\n\n        const asString = blobIdFromInt(blobId);\n\n        SuiSqlLog.log('reading blob from walrus (SDK)', blobId, asString);\n\n        const data = await this.walrusClient?.readBlob({ blobId: asString });\n\n        if (data) {\n            SuiSqlLog.log('walrus read success', data);\n            return data;\n        }\n\n        return null;\n    }\n}"],
  "mappings": "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",
  "names": ["SuiSqlLog", "axios"]
}

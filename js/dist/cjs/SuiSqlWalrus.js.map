{
  "version": 3,
  "sources": ["../../src/SuiSqlWalrus.ts"],
  "sourcesContent": ["import type { SuiClient } from '@mysten/sui/client';\nimport type { Signer } from '@mysten/sui/cryptography';\n\n// import { WalrusClient } from \"./walrusSdk2\";\nimport { WalrusClient } from '@mysten/walrus';\nimport SuiSqlLog from './SuiSqlLog';\n\ntype SuiSqlWalrusParams = {\n    suiClient: SuiClient,\n    signer?: Signer,\n    network?: string,\n};\n\nexport default class SuiSqlWalrus {\n    private suiClient?: SuiClient;\n    private signer?: Signer;\n    private network: string = 'testnet';\n\n    private walrusClient?: WalrusClient;\n\n    constructor(params: SuiSqlWalrusParams) {\n        this.suiClient = params.suiClient;\n        this.signer = params.signer;\n\n        const walrusClient = new WalrusClient({\n            network: 'testnet',\n            suiClient: this.suiClient,\n            storageNodeClientOptions: {\n                fetch: (url, options) => {\n                    console.log('fetching', url);\n                    return fetch(url, options);\n                },\n                timeout: 60_000,\n            },\n            // packageConfig: {\n            //     packageId: '0x795ddbc26b8cfff2551f45e198b87fc19473f2df50f995376b924ac80e56f88b',\n            //     latestPackageId: '0x261b2e46428a152570f9ac08972d67f7c12d62469ccd381a51774c1df7a829ca',\n            //     systemObjectId: '0x98ebc47370603fe81d9e15491b2f1443d619d1dab720d586e429ed233e1255c1',\n            //     stakingPoolId: '0x20266a17b4f1a216727f3eef5772f8d486a9e3b5e319af80a5b75809c035561d',\n            //     walPackageId: '0x8190b041122eb492bf63cb464476bd68c6b7e570a4079645a8b28732b6197a82',\n            // },\n        });\n\n        this.walrusClient = walrusClient;\n    }\n\n    async getBlobId(data: Uint8Array): Promise<string | null> {\n        if (!this.walrusClient) {\n            return null;\n        }\n        const { blobId } = await this.walrusClient.encodeBlob(data);\n        return blobId;\n    }\n\n    async write(data: Uint8Array): Promise<string | null> {\n        if (!this.walrusClient || !this.signer) {\n            return null;\n        }\n\n        SuiSqlLog.log('wrining blob to walrus', data);\n\n        const { blobId } = await this.walrusClient.writeBlob({\n            blob: data,\n            deletable: true,\n            epochs: 3,\n            signer: this.signer,\n            owner: this.signer.toSuiAddress(),\n            attributes: undefined,\n        });\n\n        SuiSqlLog.log('walrus write success', blobId);\n\n        return blobId;\n    }\n\n    async read(blobId: string): Promise<Uint8Array | null> {\n        SuiSqlLog.log('reading blob from walrus', blobId);\n\n        const data = await this.walrusClient?.readBlob({ blobId: blobId });\n\n        if (data) {\n            SuiSqlLog.log('walrus read success', data);\n            return data;\n        }\n\n        return null;\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,oBAA6B;AAC7B,uBAAsB;AAQtB,MAAO,aAA2B;AAAA,EAO9B,YAAY,QAA4B;AANxC,wBAAQ;AACR,wBAAQ;AACR,wBAAQ,WAAkB;AAE1B,wBAAQ;AAGJ,SAAK,YAAY,OAAO;AACxB,SAAK,SAAS,OAAO;AAErB,UAAM,eAAe,IAAI,2BAAa;AAAA,MAClC,SAAS;AAAA,MACT,WAAW,KAAK;AAAA,MAChB,0BAA0B;AAAA,QACtB,OAAO,CAAC,KAAK,YAAY;AACrB,kBAAQ,IAAI,YAAY,GAAG;AAC3B,iBAAO,MAAM,KAAK,OAAO;AAAA,QAC7B;AAAA,QACA,SAAS;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQJ,CAAC;AAED,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,MAAM,UAAU,MAA0C;AACtD,QAAI,CAAC,KAAK,cAAc;AACpB,aAAO;AAAA,IACX;AACA,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,aAAa,WAAW,IAAI;AAC1D,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,MAAM,MAA0C;AAClD,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,QAAQ;AACpC,aAAO;AAAA,IACX;AAEA,qBAAAA,QAAU,IAAI,0BAA0B,IAAI;AAE5C,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,aAAa,UAAU;AAAA,MACjD,MAAM;AAAA,MACN,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ,KAAK;AAAA,MACb,OAAO,KAAK,OAAO,aAAa;AAAA,MAChC,YAAY;AAAA,IAChB,CAAC;AAED,qBAAAA,QAAU,IAAI,wBAAwB,MAAM;AAE5C,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,KAAK,QAA4C;AACnD,qBAAAA,QAAU,IAAI,4BAA4B,MAAM;AAEhD,UAAM,OAAO,MAAM,KAAK,cAAc,SAAS,EAAE,OAAe,CAAC;AAEjE,QAAI,MAAM;AACN,uBAAAA,QAAU,IAAI,uBAAuB,IAAI;AACzC,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": ["SuiSqlLog"]
}

{
  "version": 3,
  "sources": ["../../src/SuiSqlBinaryPatch.ts"],
  "sourcesContent": ["\nimport { compress, decompress } from './SuiSqlUtils';\n\nexport default class SuiSqlBinaryPatch {\n\t/**\n\t * Applies a binary patch to an original Uint8Array.\n\t * @param {Uint8Array} original - The original array to be patched.\n\t * @param {Uint8Array} binaryPatch - The binary patch to apply.\n\t * @returns {Uint8Array} - The patched array.\n\t */\n\tstatic applyPatch(original: Uint8Array, binaryPatch: Uint8Array) {\n\t\tconst result = new Uint8Array(original);\n\t\tlet offset = 0;\n\n\t\twhile (offset < binaryPatch.length) {\n\t\t\tconst start = (\n\t\t\t\t(binaryPatch[offset] << 24) |\n\t\t\t\t(binaryPatch[offset + 1] << 16) |\n\t\t\t\t(binaryPatch[offset + 2] << 8) |\n\t\t\t\tbinaryPatch[offset + 3]\n\t\t\t);\n\t\t\tconst length = (binaryPatch[offset + 4] << 8) | binaryPatch[offset + 5];\n\t\t\toffset += 6;\n\n\t\t\tconst newBytes = binaryPatch.slice(offset, offset + length);\n\t\t\tresult.set(newBytes, start);\n\t\t\toffset += length;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tstatic async compressedBinaryDiff(a: Uint8Array, b: Uint8Array) {\n\t\treturn compress(this.binaryDiff(a, b));\n\t}\n\n\tstatic binaryDiff(a: Uint8Array, b: Uint8Array) {\n\t\treturn this.encodeFixedLengthPatch(this.diff(a, b));\n\t}\n\n\tstatic diff(a: Uint8Array, b: Uint8Array) {\n\t\tif (a.length !== b.length) {\n\t\t\tthrow new Error(\"Arrays must be of equal length\");\n\t\t}\n\t\n\t\tconst patch = [];\n\t\tlet i = 0;\n\t\n\t\twhile (i < a.length) {\n\t\t\tif (a[i] === b[i]) {\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tconst start = i;\n\t\t\twhile (i < a.length && a[i] !== b[i]) {\n\t\t\t\ti++;\n\t\t\t}\n\t\n\t\t\tpatch.push({\n\t\t\t\tstart,\n\t\t\t\tlength: i - start,\n\t\t\t\tnewBytes: b.slice(start, i),\n\t\t\t});\n\t\t}\n\t\n\t\treturn patch;\n\t}\n\n\tstatic encodeFixedLengthPatch(patch: any[]) {\n\t\tconst chunks = [];\n\t\n\t\tfor (const { start, length, newBytes } of patch) {\n\t\t\tconst header = new Uint8Array(6);\n\t\t\theader[0] = (start >>> 24) & 0xff;\n\t\t\theader[1] = (start >>> 16) & 0xff;\n\t\t\theader[2] = (start >>> 8) & 0xff;\n\t\t\theader[3] = start & 0xff;\n\t\t\theader[4] = (length >>> 8) & 0xff;\n\t\t\theader[5] = length & 0xff;\n\t\n\t\t\tchunks.push(header, newBytes);\n\t\t}\n\t\n\t\treturn this.concatUint8Arrays(chunks);\n\t}\n\n\tstatic concatUint8Arrays(arrays: Uint8Array[]) {\n\t\tconst totalLength = arrays.reduce((sum, arr) => sum + arr.length, 0);\n\t\tconst result = new Uint8Array(totalLength);\n\t\tlet offset = 0;\n\t\tfor (const arr of arrays) {\n\t\t\tresult.set(arr, offset);\n\t\t\toffset += arr.length;\n\t\t}\n\t\treturn result;\n\t}\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAAqC;AAErC,MAAO,kBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtC,OAAO,WAAW,UAAsB,aAAyB;AAChE,UAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,QAAI,SAAS;AAEb,WAAO,SAAS,YAAY,QAAQ;AACnC,YAAM,QACJ,YAAY,MAAM,KAAK,KACvB,YAAY,SAAS,CAAC,KAAK,KAC3B,YAAY,SAAS,CAAC,KAAK,IAC5B,YAAY,SAAS,CAAC;AAEvB,YAAM,SAAU,YAAY,SAAS,CAAC,KAAK,IAAK,YAAY,SAAS,CAAC;AACtE,gBAAU;AAEV,YAAM,WAAW,YAAY,MAAM,QAAQ,SAAS,MAAM;AAC1D,aAAO,IAAI,UAAU,KAAK;AAC1B,gBAAU;AAAA,IACX;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,aAAa,qBAAqB,GAAe,GAAe;AAC/D,eAAO,6BAAS,KAAK,WAAW,GAAG,CAAC,CAAC;AAAA,EACtC;AAAA,EAEA,OAAO,WAAW,GAAe,GAAe;AAC/C,WAAO,KAAK,uBAAuB,KAAK,KAAK,GAAG,CAAC,CAAC;AAAA,EACnD;AAAA,EAEA,OAAO,KAAK,GAAe,GAAe;AACzC,QAAI,EAAE,WAAW,EAAE,QAAQ;AAC1B,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACjD;AAEA,UAAM,QAAQ,CAAC;AACf,QAAI,IAAI;AAER,WAAO,IAAI,EAAE,QAAQ;AACpB,UAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AAClB;AACA;AAAA,MACD;AAEA,YAAM,QAAQ;AACd,aAAO,IAAI,EAAE,UAAU,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AACrC;AAAA,MACD;AAEA,YAAM,KAAK;AAAA,QACV;AAAA,QACA,QAAQ,IAAI;AAAA,QACZ,UAAU,EAAE,MAAM,OAAO,CAAC;AAAA,MAC3B,CAAC;AAAA,IACF;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,uBAAuB,OAAc;AAC3C,UAAM,SAAS,CAAC;AAEhB,eAAW,EAAE,OAAO,QAAQ,SAAS,KAAK,OAAO;AAChD,YAAM,SAAS,IAAI,WAAW,CAAC;AAC/B,aAAO,CAAC,IAAK,UAAU,KAAM;AAC7B,aAAO,CAAC,IAAK,UAAU,KAAM;AAC7B,aAAO,CAAC,IAAK,UAAU,IAAK;AAC5B,aAAO,CAAC,IAAI,QAAQ;AACpB,aAAO,CAAC,IAAK,WAAW,IAAK;AAC7B,aAAO,CAAC,IAAI,SAAS;AAErB,aAAO,KAAK,QAAQ,QAAQ;AAAA,IAC7B;AAEA,WAAO,KAAK,kBAAkB,MAAM;AAAA,EACrC;AAAA,EAEA,OAAO,kBAAkB,QAAsB;AAC9C,UAAM,cAAc,OAAO,OAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,QAAQ,CAAC;AACnE,UAAM,SAAS,IAAI,WAAW,WAAW;AACzC,QAAI,SAAS;AACb,eAAW,OAAO,QAAQ;AACzB,aAAO,IAAI,KAAK,MAAM;AACtB,gBAAU,IAAI;AAAA,IACf;AACA,WAAO;AAAA,EACR;AAED;",
  "names": []
}

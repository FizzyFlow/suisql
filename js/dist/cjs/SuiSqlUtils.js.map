{
  "version": 3,
  "sources": ["../../src/SuiSqlUtils.ts"],
  "sourcesContent": ["import pako from 'pako';\nimport { bcs } from '@mysten/sui/bcs';\n\n/**\n * Compress Uint8Array\n */\nconst compress = async (input: Uint8Array): Promise<Uint8Array> => {\n    return pako.deflate(input);\n};\n\n/**\n * Decompress zlib compresses Uint8Array\n */\nconst decompress = async (compressed: Uint8Array): Promise<Uint8Array> => {\n    return pako.inflate(compressed);\n}\n\n/**\n * Makes a shallow copy of object, array or primitive\n */\nconst anyShallowCopy = (input: Object|Array<any>|any): Object|Array<any>|any => {\n    if (Array.isArray(input)) {\n        return [...input]; // Shallow copy of array\n    } else if (typeof input === 'object' && input !== null) {\n        return { ...input }; // Shallow copy of object\n    } else {\n        return input; // Return as is for non-objects (primitives)\n    }\n};\n\n/**\n * Determine if SQL statement 100% updates database state\n */\nconst isSureWriteSql = (sql: string) => {\n    const checks = ['CREATE', 'ALTER', 'INSERT', 'UPDATE', 'DELETE', 'DROP'];\n    for (const check of checks) {\n        if (sql.trim().toUpperCase().startsWith(check)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst getFieldsFromCreateTableSql = (sql: string): Array<string> | null => {\n    const inParentheses = extractTopLevelParenthesesText( sql.split(\"\\n\").join(' ') );\n\n    if (!inParentheses || !inParentheses[0]) {\n        return null;\n    }\n    const fields = inParentheses[0].split(',');\n\n    const ret = [];\n    for (const field of fields) {\n        const definition = field.trim().toLowerCase();\n        ret.push(definition);\n    }\n\n    console.log(ret);\n    console.log(ret);\n\n    return ret;\n};\n\n\nconst extractTopLevelParenthesesText = (str: string): Array<string> => {\n    let result = [];\n    let stack = [];\n    let startIndex = -1;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '(') {\n            if (stack.length === 0) {\n                startIndex = i + 1; // Start after '('\n            }\n            stack.push('(');\n        } else if (str[i] === ')') {\n            stack.pop();\n            if (stack.length === 0 && startIndex !== -1) {\n                result.push(str.substring(startIndex, i));\n                startIndex = -1; // Reset for the next top-level match\n            }\n        }\n    }\n\n    return result;\n}\n\nconst int32ToUint8ArrayBE = (num: number) => Uint8Array.from([num >>> 24, num >>> 16 & 0xff, num >>> 8 & 0xff, num & 0xff]);\n\n\nconst bigintToUint8Array = (bigint: bigint) =>{\n    return bcs.u256().serialize(bigint).toBytes();\n}\n\nconst idTo64 = (id: bigint | number | string) => {\n    const asA = Array.from( bigintToUint8Array(BigInt(id)) );\n    let base64String = btoa(String.fromCharCode.apply(null, asA));\n    return base64String.replaceAll(\"/\", \"_\").replaceAll(\"+\", \"-\").replaceAll(\"=\", \"\");\n}\n\nconst walrus64ToBigInt = (v: string) => {\n    const base64 = v.replaceAll(\"_\", \"/\").replaceAll(\"-\", \"+\");\n    const raw = atob(base64);\n    // const rawLength = raw.length;\n    const hex: string[] = [];\n    raw.split('').forEach(function (ch) {\n        var h = ch.charCodeAt(0).toString(16);\n        if (h.length % 2) { h = '0' + h; }\n        hex.unshift(h);\n    });\n    return BigInt('0x' + hex.join(''));\n}\n\nconst concatUint8Arrays = (arrays: Uint8Array[]) => {\n    const totalLength = arrays.reduce((sum, arr) => sum + arr.length, 0);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const arr of arrays) {\n        result.set(arr, offset);\n        offset += arr.length;\n    }\n    return result;\n};\n\nfunction blobIdFromInt(blobId: bigint | string): string {\n\treturn bcs\n\t\t.u256()\n\t\t.serialize(blobId)\n\t\t.toBase64()\n\t\t.replace(/=*$/, '')\n\t\t.replaceAll('+', '-')\n\t\t.replaceAll('/', '_');\n}\n\nfunction blobIdFromBytes(blobId: Uint8Array): string {\n\treturn blobIdFromInt(bcs.u256().parse(blobId));\n}\n\nfunction blobIdIntFromBytes(blobId: Uint8Array): bigint {\n    return BigInt(bcs.u256().parse(blobId));\n}\n\nfunction blobIdToInt(blobId: string): bigint {\n\treturn BigInt(bcs.u256().fromBase64(blobId.replaceAll('-', '+').replaceAll('_', '/')));\n}\n\nexport { \n    anyShallowCopy, \n    isSureWriteSql, \n    compress, \n    decompress,\n    getFieldsFromCreateTableSql,\n    int32ToUint8ArrayBE,\n    bigintToUint8Array,\n    idTo64,\n    walrus64ToBigInt,\n    concatUint8Arrays,\n\n    blobIdFromInt,\n    blobIdFromBytes,\n    blobIdToInt,\n    blobIdIntFromBytes,\n};"],
  "mappings": "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",
  "names": ["pako"]
}

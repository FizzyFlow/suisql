{
  "version": 3,
  "sources": ["../../src/SuiSql.ts"],
  "sourcesContent": ["// import initSqlJs from 'sql.js';\nimport SuiSqlStatement from './SuiSqlStatement';\nimport SuiSqlSync from './SuiSqlSync';\n\nimport type { SuiSqlSyncToBlobckchainParams } from './SuiSqlSync';\n\n// import type { Database, BindParams } from \"sql.js\";\nimport type { SuiClient } from '@mysten/sui/client';\nimport type { Signer } from '@mysten/sui/cryptography';\n\n// import { getFieldsFromCreateTableSql } from './SuiSqlUtils';\nimport SuiSqlField from './SuiSqlField';\nimport SuiSqlLibrarian from './SuiSqlLibrarian';\n\nimport type { Database, BindParams } from './SuiSqlLibrarian';\n\nimport { CustomSignAndExecuteTransactionFunction } from \"./SuiSqlBlockchain\";\n\nimport SuiSqliteBinaryView from './SuiSqliteBinaryView';\n\nimport SuiSqlLog from './SuiSqlLog';\n\nimport type { SuiSqlWalrusWalrusClient } from './SuiSqlWalrus';\n\ntype SuiSqlParams = {\n    debug?: boolean,\n\n    id?: string,                            // id of the database, if not provided, name is used\n    name?: string,                          // name of the database, if no id is provided, SuiSql will look up for the database by name\n\n    network?: string, // 'testnet' | 'mainnet'\n\n    suiClient: SuiClient,                    // always needed, pass the one connected to needed network RPC\n    signer?: Signer,                          // for write operations (both for sui and walrus)\n    signAndExecuteTransaction?: CustomSignAndExecuteTransactionFunction, // for dApp, wrap wallet adapter signAndExecuteTransaction into this\n    currentWalletAddress?: string,            // address of the connected wallet for write operations (both for sui and walrus)\n\n    walrusClient?: SuiSqlWalrusWalrusClient,  // optional, either walrusClient (to read) or walrusClient + signer (to read/write)\n    publisherUrl?: string,                    // or publisherUrl + currentWalletAddress ( to write )\n    aggregatorUrl?: string,                   // better specify this always, as it's faster to read from aggregator than from walrusClient\n};\n\nenum State {\n    INITIALIZING = 'INITIALIZING',\n    EMPTY = 'EMPTY',\n    ERROR = 'ERROR',\n    OK = 'OK',\n};\n\nexport default class SuiSql {\n\n    public id?: string;\n    public name?: string;\n\n    private suiClient?: SuiClient;\n\n    public suiSqlSync?: SuiSqlSync;\n    public state: State = State.INITIALIZING;\n    private statements: Array<SuiSqlStatement> = [];\n    private _db: Database | null = null;\n    // private _SQL: initSqlJs.SqlJsStatic | null = null;\n\n    private librarian = new SuiSqlLibrarian();\n\n    private __initializationPromise: Promise<State> | null = null;\n\n    private paramsCopy?: SuiSqlParams;\n\n    public mostRecentWriteChangeTime?: number; // time at which the most recent write operation was done\n\n    public binaryView?: SuiSqliteBinaryView;\n    public initialBinaryView?: SuiSqliteBinaryView;\n\n    constructor(params: SuiSqlParams) {\n        // this._SQL = null;\n        this.paramsCopy = {...params};\n\n        if (params.debug !== undefined) {\n            SuiSqlLog.switch(params.debug);\n        }\n\n        if (params.id && params.name) {\n            throw new Error('either id or name can be provided, not both');\n        }\n\n        if (params.id) {\n            this.id = params.id;\n        }\n        if (params.name) {\n            this.name = params.name;\n        }\n        if (params.suiClient) {\n            \n            this.suiClient = params.suiClient;\n\n            if (this.id || this.name) {\n                this.suiSqlSync = new SuiSqlSync({\n                    suiSql: this,\n\n                    id: this.id,\n                    name: this.name,\n                    \n                    suiClient: this.suiClient,\n                    \n                    signer: params.signer,\n                    signAndExecuteTransaction: params.signAndExecuteTransaction,\n                    currentWalletAddress: params.currentWalletAddress,\n                    \n                    network: params.network,\n\n                    walrusClient: params.walrusClient,\n                    publisherUrl: params.publisherUrl,\n                    aggregatorUrl: params.aggregatorUrl,\n                });\n            }\n        } else {\n            throw new Error('SuiClient is required');\n        }\n    }\n\n    get network() {\n        if (this.suiSqlSync) {\n            return this.suiSqlSync.network;\n        }\n        return null;\n    }\n\n    /**\n     * DB Base Walrus Blob ID ( in base64 format, the one for urls )\n     */\n    get walrusBlobId() {\n        if (this.suiSqlSync) {\n            return this.suiSqlSync.walrusBlobId;\n        }\n        return null;\n    }\n\n    get walrusEndEpoch() {\n        if (this.suiSqlSync) {\n            return this.suiSqlSync.walrusEndEpoch;\n        }\n        return null;\n    }\n\n    async hasWriteAccess() {\n        if (this.suiSqlSync) {\n            return await this.suiSqlSync.hasWriteAccess();\n        }\n        return false;\n    }\n\n    hasUnsavedChanges() {\n        if (this.suiSqlSync) {\n            return this.suiSqlSync.hasUnsavedChanges();\n        }\n        return false;\n    }\n\n    unsavedChangesCount() {\n        if (this.suiSqlSync) {\n            return this.suiSqlSync.unsavedChangesCount();\n        }\n        return 0;\n    }\n\n    getBinaryView() {\n        if (!this.binaryView || \n            (this.binaryView && this.mostRecentWriteChangeTime &&\n                (!this.binaryView.createdAt || this.binaryView.createdAt < this.mostRecentWriteChangeTime) ) ) {\n\n            const data = this.export();\n            if (data) {\n                this.binaryView = new SuiSqliteBinaryView({\n                    binary: data,\n                });\n            }\n        }\n\n        if (this.binaryView) {\n            return this.binaryView;\n        }\n\n        return null;\n    }\n\n    async getBinaryPatch(): Promise<Uint8Array | null> {\n        const currentBinaryView = this.getBinaryView();\n        if (this.initialBinaryView && currentBinaryView) {\n            const binaryPatch = await currentBinaryView.getBinaryPatch(this.initialBinaryView);\n            return binaryPatch;\n        }\n        return null;\n    }\n\n    async getExpectedBlobId(): Promise<bigint | null> {\n        const data = this.export();\n        if (data && this.suiSqlSync && this.suiSqlSync.walrus) {\n            return await this.suiSqlSync.walrus.calculateBlobId(data);\n        }\n        return null;\n    }\n\n    async applyBinaryPatch(binaryPatch: Uint8Array) {\n        const currentBinaryView = this.getBinaryView();\n        if (!currentBinaryView) {\n            return false;\n        }\n\n        const patched = await currentBinaryView.getPatched(binaryPatch);\n        this.replace(patched);\n\n        return true;\n    }\n\n    async listDatabases(callback?: Function) {\n        if (this.suiSqlSync && this.suiSqlSync.chain) {\n            return await this.suiSqlSync.chain.listDatabases(callback);\n        }\n        return null;\n    }\n\n    /**\n     * Initialize a database re-using configuration of the current one, so only the id or name is required\n     * @param idOrName suiSql database id or name\n     */\n    async database(idOrName: string): Promise<SuiSql | null> {\n        if (!this.paramsCopy) {\n            return null;\n        }\n\n        const paramsCopy = {...this.paramsCopy};\n        if (idOrName.startsWith('0x')) {\n            paramsCopy.id = idOrName;\n            delete paramsCopy.name;\n        } else {\n            paramsCopy.name = idOrName;\n            delete paramsCopy.id;\n        }\n\n        const db = new SuiSql(paramsCopy);\n        await db.initialize();\n\n        return db;\n    }\n\n    get db() {\n        return this._db;\n    }\n\n    get writeExecutions() {\n        const ret = [];\n        for (const stmt of this.statements) {\n            ret.push(...stmt.writeExecutions);\n        }\n\n        return ret;\n    }\n\n    replace(data: Uint8Array) {\n        if (this.librarian.isReady) {\n            this.binaryView = undefined;\n            this.initialBinaryView = new SuiSqliteBinaryView({\n                binary: data,\n            });;\n\n            this._db = this.librarian.fromBinarySync(data);\n            this.mostRecentWriteChangeTime = Date.now();\n\n            return true;\n        }\n        return false;\n    }\n\n    async initialize() {\n        if (this.__initializationPromise) {\n            return await this.__initializationPromise;\n        }\n\n        let __initializationPromiseResolver: Function = () => {};\n        this.__initializationPromise = new Promise((resolve) => {\n            __initializationPromiseResolver = resolve;\n        });\n\n        SuiSqlLog.log('initializing SuiSql database...', this.paramsCopy);\n\n        try {\n            this.state = State.EMPTY;\n            this._db = await this.librarian.fromBinary();\n    \n            try {\n                if (this.suiSqlSync) {\n                    await this.suiSqlSync.syncFromBlockchain();\n                    // that would also update this.state to OK in case there is something synced from the chain\n    \n                    this.id = this.suiSqlSync.id;\n                    if (!this.id) {\n                        SuiSqlLog.log('error initilizing');\n\n                        this.state = State.ERROR;\n                    } else {\n                        SuiSqlLog.log('db id', this.id);\n                        this.mostRecentWriteChangeTime = Date.now();\n\n                        if (this.suiSqlSync.hasBeenCreated) {\n                            SuiSqlLog.log('database is freshly created');\n\n                            this.state = State.EMPTY;\n                        } else {\n                            // SuiSqlLog.log('database is synced from the blockchain');\n\n                            this.state = State.OK;\n                        }\n\n                        // make a binary view of the database to calculate binary patches later\n                        let data = this.export();\n                        if (data) {\n                            if (data.length == 0) {\n                                await this.touch();\n                                const redata = this.export();\n                                if (redata) {\n                                    data = redata;\n                                }\n                            }\n\n                            this.initialBinaryView = new SuiSqliteBinaryView({\n                                binary: data,\n                            });\n                        }\n                    }\n                }\n            } catch (e) {\n                SuiSqlLog.log('error', e);\n                this.state = State.ERROR;\n            }\n        } catch (e) {\n            SuiSqlLog.log('error', e);\n            this.state = State.ERROR;\n        }\n\n        __initializationPromiseResolver(this.state);\n\n        return this.state;\n    }\n\n    async sync(params?: SuiSqlSyncToBlobckchainParams) {\n        if (this.suiSqlSync) {\n            const success = await this.suiSqlSync.syncToBlockchain(params);\n            if (success) {\n                this.binaryView = undefined;\n                const data = this.export();\n                if (data) {\n                    this.initialBinaryView = new SuiSqliteBinaryView({\n                        binary: data,\n                    });;\n                } else {\n                    this.initialBinaryView = undefined;\n                }\n            }\n        } else {\n            throw new Error('not enough initialization params to sync');\n        }\n    }\n\n    async fillExpectedWalrus() {\n        if (this.suiSqlSync) {\n            await this.suiSqlSync.fillExpectedWalrus();\n        } else {\n            throw new Error('not enough initialization params to sync');\n        }\n    }\n\n    async extendWalrus(extendedEpochs: number = 1) {\n        await this.initialize();\n        \n        if (this.suiSqlSync) {\n            await this.suiSqlSync.extendWalrus(extendedEpochs);\n        } else {\n            throw new Error('not enough initialization params to sync');\n        }\n    }\n\n    markAsOk() {\n        this.state = State.OK;\n    }\n\n    /**\n     * Execute an SQL query, ignoring the rows it returns.\n     */\n    async run(sql: string, params: BindParams) {\n        SuiSqlLog.log('run', sql, params);\n\n        await this.initialize();\n\n        const suiSqlStatement = new SuiSqlStatement({\n            suiSql: this,\n            sql: sql,\n        });\n        this.statements.push(suiSqlStatement);\n        if (params != null) {\n            suiSqlStatement.bind(params);\n        }\n        suiSqlStatement.run();\n\n        return true;\n    }\n\n    /**\n     * Prepare an SQL statement\n     * \n     * @param {string} sql a string of SQL, that can contain placeholders (?, :VVV, :AAA, @AAA)\n     * @param {array|object} params values to bind to placeholders\n     */\n    async prepare(sql: string, params?: BindParams) {\n        SuiSqlLog.log('prepare', sql, params);\n\n        await this.initialize();\n\n        const suiSqlStatement = new SuiSqlStatement({\n            suiSql: this,\n            sql: sql,\n        });\n        if (params != null) {\n            suiSqlStatement.bind(params);\n        }\n        this.statements.push(suiSqlStatement);\n\n        return suiSqlStatement;\n    }\n\n    /**\n     * Prepare an SQL statement and return all available results immediately\n     * \n     * @param {string} sql a string of SQL, that can contain placeholders (?, :VVV, :AAA, @AAA)\n     * @param {array|object} params values to bind to placeholders\n     */\n    async query(sql: string, params?: BindParams): Promise<Array<any>> {\n        SuiSqlLog.log('query', sql, params);\n\n        await this.initialize();\n\n        const prepared = await this.prepare(sql, params);\n        const ret = [];\n        while (prepared.step()) {\n            ret.push(prepared.getAsObject());\n        }\n\n        SuiSqlLog.log('query results', ret);\n\n        return ret;\n    }\n\n    /**\n     * Run an sql text containing many sql queries, one by one, ignoring return data. Returns the count of processed queries.\n     */\n    async iterateStatements(sql: string): Promise<number> {\n        SuiSqlLog.log('iterateStatements', sql);\n\n        await this.initialize();\n\n        if (!this.db) {\n            return 0;\n        }\n\n        let count = 0;\n        for (let statement of this.db.iterateStatements(sql)) {\n            const suiSqlStatement = new SuiSqlStatement({\n                suiSql: this,\n                statement: statement,\n            });\n            suiSqlStatement.step();\n            this.statements.push(suiSqlStatement);\n            // do not call statement.free() manually, each statement is freed\n            // before the next one is parsed\n\n            count = count + 1;\n        }\n\n        return count;\n    }\n\n    async touch() {\n        if (!this.db) {\n            return false;\n        }\n\n        try {\n            const rawStatement = this.db.prepare(\"VACUUM;\");\n            rawStatement.step();\n            rawStatement.free();\n        } catch (e) {\n            console.error(e);\n        }\n\n        return true;\n    }\n\n    async listTables() {\n        SuiSqlLog.log('listTables');\n\n        await this.initialize();\n\n        const tables = [];\n        const q = await this.prepare(\"SELECT name FROM sqlite_master WHERE type='table';\");\n        while (q.step()) {\n            const row = q.getAsObject();\n            if (row) {\n                tables.push(row.name);\n            }\n        }\n        q.free();\n\n        SuiSqlLog.log('listTables results', tables);\n\n        return tables;\n    }\n\n    async describeTable(tableName: string) {\n        SuiSqlLog.log('describeTable', tableName);\n\n        await this.initialize();\n\n        const fields: Array<SuiSqlField> = [];\n        try {\n            const q = await this.prepare(\"select * from pragma_table_info(?) as tblInfo;\", [tableName] );\n\n            await q.forEach((row: any) => {\n                fields.push(new SuiSqlField({\n                    suiSql: this,\n                    name: row.name,\n                    type: row.type,\n                    notnull: row.notnull,\n                    dfltValue: row.dflt_value,\n                    pk: row.pk, \n                    cid: row.cid,\n                }));\n            });\n\n            q.free();\n        } catch (e) {\n            console.error(e);\n        }\n\n        SuiSqlLog.log('describeTable results', fields);\n\n        return fields;\n    }\n\n    /**\n     * Export the database as SqlLite binary representation\n     */\n    export(): Uint8Array | null {\n        if (this.db) {\n            return this.db.export();\n        }\n\n        return null;\n    }\n        \n}"],
  "mappings": ";;;AACA,OAAO,qBAAqB;AAC5B,OAAO,gBAAgB;AASvB,OAAO,iBAAiB;AACxB,OAAO,qBAAqB;AAM5B,OAAO,yBAAyB;AAEhC,OAAO,eAAe;AAsBtB,IAAK,QAAL,kBAAKA,WAAL;AACI,EAAAA,OAAA,kBAAe;AACf,EAAAA,OAAA,WAAQ;AACR,EAAAA,OAAA,WAAQ;AACR,EAAAA,OAAA,QAAK;AAJJ,SAAAA;AAAA,GAAA;AAKJ;AAED,MAAO,OAAqB;AAAA,EAwBxB,YAAY,QAAsB;AAtBlC,wBAAO;AACP,wBAAO;AAEP,wBAAQ;AAER,wBAAO;AACP,wBAAO,SAAe;AACtB,wBAAQ,cAAqC,CAAC;AAC9C,wBAAQ,OAAuB;AAG/B;AAAA,wBAAQ,aAAY,IAAI,gBAAgB;AAExC,wBAAQ,2BAAiD;AAEzD,wBAAQ;AAER,wBAAO;AAEP;AAAA,wBAAO;AACP,wBAAO;AAIH,SAAK,aAAa,EAAC,GAAG,OAAM;AAE5B,QAAI,OAAO,UAAU,QAAW;AAC5B,gBAAU,OAAO,OAAO,KAAK;AAAA,IACjC;AAEA,QAAI,OAAO,MAAM,OAAO,MAAM;AAC1B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AAEA,QAAI,OAAO,IAAI;AACX,WAAK,KAAK,OAAO;AAAA,IACrB;AACA,QAAI,OAAO,MAAM;AACb,WAAK,OAAO,OAAO;AAAA,IACvB;AACA,QAAI,OAAO,WAAW;AAElB,WAAK,YAAY,OAAO;AAExB,UAAI,KAAK,MAAM,KAAK,MAAM;AACtB,aAAK,aAAa,IAAI,WAAW;AAAA,UAC7B,QAAQ;AAAA,UAER,IAAI,KAAK;AAAA,UACT,MAAM,KAAK;AAAA,UAEX,WAAW,KAAK;AAAA,UAEhB,QAAQ,OAAO;AAAA,UACf,2BAA2B,OAAO;AAAA,UAClC,sBAAsB,OAAO;AAAA,UAE7B,SAAS,OAAO;AAAA,UAEhB,cAAc,OAAO;AAAA,UACrB,cAAc,OAAO;AAAA,UACrB,eAAe,OAAO;AAAA,QAC1B,CAAC;AAAA,MACL;AAAA,IACJ,OAAO;AACH,YAAM,IAAI,MAAM,uBAAuB;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEA,IAAI,UAAU;AACV,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAe;AACf,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,iBAAiB;AACjB,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK,WAAW;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,iBAAiB;AACnB,QAAI,KAAK,YAAY;AACjB,aAAO,MAAM,KAAK,WAAW,eAAe;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,oBAAoB;AAChB,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK,WAAW,kBAAkB;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,sBAAsB;AAClB,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK,WAAW,oBAAoB;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB;AACZ,QAAI,CAAC,KAAK,cACL,KAAK,cAAc,KAAK,8BACpB,CAAC,KAAK,WAAW,aAAa,KAAK,WAAW,YAAY,KAAK,4BAA+B;AAEnG,YAAM,OAAO,KAAK,OAAO;AACzB,UAAI,MAAM;AACN,aAAK,aAAa,IAAI,oBAAoB;AAAA,UACtC,QAAQ;AAAA,QACZ,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK;AAAA,IAChB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,iBAA6C;AAC/C,UAAM,oBAAoB,KAAK,cAAc;AAC7C,QAAI,KAAK,qBAAqB,mBAAmB;AAC7C,YAAM,cAAc,MAAM,kBAAkB,eAAe,KAAK,iBAAiB;AACjF,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,oBAA4C;AAC9C,UAAM,OAAO,KAAK,OAAO;AACzB,QAAI,QAAQ,KAAK,cAAc,KAAK,WAAW,QAAQ;AACnD,aAAO,MAAM,KAAK,WAAW,OAAO,gBAAgB,IAAI;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,iBAAiB,aAAyB;AAC5C,UAAM,oBAAoB,KAAK,cAAc;AAC7C,QAAI,CAAC,mBAAmB;AACpB,aAAO;AAAA,IACX;AAEA,UAAM,UAAU,MAAM,kBAAkB,WAAW,WAAW;AAC9D,SAAK,QAAQ,OAAO;AAEpB,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,cAAc,UAAqB;AACrC,QAAI,KAAK,cAAc,KAAK,WAAW,OAAO;AAC1C,aAAO,MAAM,KAAK,WAAW,MAAM,cAAc,QAAQ;AAAA,IAC7D;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,SAAS,UAA0C;AACrD,QAAI,CAAC,KAAK,YAAY;AAClB,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,EAAC,GAAG,KAAK,WAAU;AACtC,QAAI,SAAS,WAAW,IAAI,GAAG;AAC3B,iBAAW,KAAK;AAChB,aAAO,WAAW;AAAA,IACtB,OAAO;AACH,iBAAW,OAAO;AAClB,aAAO,WAAW;AAAA,IACtB;AAEA,UAAM,KAAK,IAAI,OAAO,UAAU;AAChC,UAAM,GAAG,WAAW;AAEpB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,KAAK;AACL,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,kBAAkB;AAClB,UAAM,MAAM,CAAC;AACb,eAAW,QAAQ,KAAK,YAAY;AAChC,UAAI,KAAK,GAAG,KAAK,eAAe;AAAA,IACpC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,MAAkB;AACtB,QAAI,KAAK,UAAU,SAAS;AACxB,WAAK,aAAa;AAClB,WAAK,oBAAoB,IAAI,oBAAoB;AAAA,QAC7C,QAAQ;AAAA,MACZ,CAAC;AAAE;AAEH,WAAK,MAAM,KAAK,UAAU,eAAe,IAAI;AAC7C,WAAK,4BAA4B,KAAK,IAAI;AAE1C,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,aAAa;AACf,QAAI,KAAK,yBAAyB;AAC9B,aAAO,MAAM,KAAK;AAAA,IACtB;AAEA,QAAI,kCAA4C,MAAM;AAAA,IAAC;AACvD,SAAK,0BAA0B,IAAI,QAAQ,CAAC,YAAY;AACpD,wCAAkC;AAAA,IACtC,CAAC;AAED,cAAU,IAAI,mCAAmC,KAAK,UAAU;AAEhE,QAAI;AACA,WAAK,QAAQ;AACb,WAAK,MAAM,MAAM,KAAK,UAAU,WAAW;AAE3C,UAAI;AACA,YAAI,KAAK,YAAY;AACjB,gBAAM,KAAK,WAAW,mBAAmB;AAGzC,eAAK,KAAK,KAAK,WAAW;AAC1B,cAAI,CAAC,KAAK,IAAI;AACV,sBAAU,IAAI,mBAAmB;AAEjC,iBAAK,QAAQ;AAAA,UACjB,OAAO;AACH,sBAAU,IAAI,SAAS,KAAK,EAAE;AAC9B,iBAAK,4BAA4B,KAAK,IAAI;AAE1C,gBAAI,KAAK,WAAW,gBAAgB;AAChC,wBAAU,IAAI,6BAA6B;AAE3C,mBAAK,QAAQ;AAAA,YACjB,OAAO;AAGH,mBAAK,QAAQ;AAAA,YACjB;AAGA,gBAAI,OAAO,KAAK,OAAO;AACvB,gBAAI,MAAM;AACN,kBAAI,KAAK,UAAU,GAAG;AAClB,sBAAM,KAAK,MAAM;AACjB,sBAAM,SAAS,KAAK,OAAO;AAC3B,oBAAI,QAAQ;AACR,yBAAO;AAAA,gBACX;AAAA,cACJ;AAEA,mBAAK,oBAAoB,IAAI,oBAAoB;AAAA,gBAC7C,QAAQ;AAAA,cACZ,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,SAAS,GAAG;AACR,kBAAU,IAAI,SAAS,CAAC;AACxB,aAAK,QAAQ;AAAA,MACjB;AAAA,IACJ,SAAS,GAAG;AACR,gBAAU,IAAI,SAAS,CAAC;AACxB,WAAK,QAAQ;AAAA,IACjB;AAEA,oCAAgC,KAAK,KAAK;AAE1C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,MAAM,KAAK,QAAwC;AAC/C,QAAI,KAAK,YAAY;AACjB,YAAM,UAAU,MAAM,KAAK,WAAW,iBAAiB,MAAM;AAC7D,UAAI,SAAS;AACT,aAAK,aAAa;AAClB,cAAM,OAAO,KAAK,OAAO;AACzB,YAAI,MAAM;AACN,eAAK,oBAAoB,IAAI,oBAAoB;AAAA,YAC7C,QAAQ;AAAA,UACZ,CAAC;AAAE;AAAA,QACP,OAAO;AACH,eAAK,oBAAoB;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC9D;AAAA,EACJ;AAAA,EAEA,MAAM,qBAAqB;AACvB,QAAI,KAAK,YAAY;AACjB,YAAM,KAAK,WAAW,mBAAmB;AAAA,IAC7C,OAAO;AACH,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC9D;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa,iBAAyB,GAAG;AAC3C,UAAM,KAAK,WAAW;AAEtB,QAAI,KAAK,YAAY;AACjB,YAAM,KAAK,WAAW,aAAa,cAAc;AAAA,IACrD,OAAO;AACH,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC9D;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,KAAa,QAAoB;AACvC,cAAU,IAAI,OAAO,KAAK,MAAM;AAEhC,UAAM,KAAK,WAAW;AAEtB,UAAM,kBAAkB,IAAI,gBAAgB;AAAA,MACxC,QAAQ;AAAA,MACR;AAAA,IACJ,CAAC;AACD,SAAK,WAAW,KAAK,eAAe;AACpC,QAAI,UAAU,MAAM;AAChB,sBAAgB,KAAK,MAAM;AAAA,IAC/B;AACA,oBAAgB,IAAI;AAEpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QAAQ,KAAa,QAAqB;AAC5C,cAAU,IAAI,WAAW,KAAK,MAAM;AAEpC,UAAM,KAAK,WAAW;AAEtB,UAAM,kBAAkB,IAAI,gBAAgB;AAAA,MACxC,QAAQ;AAAA,MACR;AAAA,IACJ,CAAC;AACD,QAAI,UAAU,MAAM;AAChB,sBAAgB,KAAK,MAAM;AAAA,IAC/B;AACA,SAAK,WAAW,KAAK,eAAe;AAEpC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,MAAM,KAAa,QAA0C;AAC/D,cAAU,IAAI,SAAS,KAAK,MAAM;AAElC,UAAM,KAAK,WAAW;AAEtB,UAAM,WAAW,MAAM,KAAK,QAAQ,KAAK,MAAM;AAC/C,UAAM,MAAM,CAAC;AACb,WAAO,SAAS,KAAK,GAAG;AACpB,UAAI,KAAK,SAAS,YAAY,CAAC;AAAA,IACnC;AAEA,cAAU,IAAI,iBAAiB,GAAG;AAElC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,KAA8B;AAClD,cAAU,IAAI,qBAAqB,GAAG;AAEtC,UAAM,KAAK,WAAW;AAEtB,QAAI,CAAC,KAAK,IAAI;AACV,aAAO;AAAA,IACX;AAEA,QAAI,QAAQ;AACZ,aAAS,aAAa,KAAK,GAAG,kBAAkB,GAAG,GAAG;AAClD,YAAM,kBAAkB,IAAI,gBAAgB;AAAA,QACxC,QAAQ;AAAA,QACR;AAAA,MACJ,CAAC;AACD,sBAAgB,KAAK;AACrB,WAAK,WAAW,KAAK,eAAe;AAIpC,cAAQ,QAAQ;AAAA,IACpB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,QAAQ;AACV,QAAI,CAAC,KAAK,IAAI;AACV,aAAO;AAAA,IACX;AAEA,QAAI;AACA,YAAM,eAAe,KAAK,GAAG,QAAQ,SAAS;AAC9C,mBAAa,KAAK;AAClB,mBAAa,KAAK;AAAA,IACtB,SAAS,GAAG;AACR,cAAQ,MAAM,CAAC;AAAA,IACnB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,aAAa;AACf,cAAU,IAAI,YAAY;AAE1B,UAAM,KAAK,WAAW;AAEtB,UAAM,SAAS,CAAC;AAChB,UAAM,IAAI,MAAM,KAAK,QAAQ,oDAAoD;AACjF,WAAO,EAAE,KAAK,GAAG;AACb,YAAM,MAAM,EAAE,YAAY;AAC1B,UAAI,KAAK;AACL,eAAO,KAAK,IAAI,IAAI;AAAA,MACxB;AAAA,IACJ;AACA,MAAE,KAAK;AAEP,cAAU,IAAI,sBAAsB,MAAM;AAE1C,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,cAAc,WAAmB;AACnC,cAAU,IAAI,iBAAiB,SAAS;AAExC,UAAM,KAAK,WAAW;AAEtB,UAAM,SAA6B,CAAC;AACpC,QAAI;AACA,YAAM,IAAI,MAAM,KAAK,QAAQ,kDAAkD,CAAC,SAAS,CAAE;AAE3F,YAAM,EAAE,QAAQ,CAAC,QAAa;AAC1B,eAAO,KAAK,IAAI,YAAY;AAAA,UACxB,QAAQ;AAAA,UACR,MAAM,IAAI;AAAA,UACV,MAAM,IAAI;AAAA,UACV,SAAS,IAAI;AAAA,UACb,WAAW,IAAI;AAAA,UACf,IAAI,IAAI;AAAA,UACR,KAAK,IAAI;AAAA,QACb,CAAC,CAAC;AAAA,MACN,CAAC;AAED,QAAE,KAAK;AAAA,IACX,SAAS,GAAG;AACR,cAAQ,MAAM,CAAC;AAAA,IACnB;AAEA,cAAU,IAAI,yBAAyB,MAAM;AAE7C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,SAA4B;AACxB,QAAI,KAAK,IAAI;AACT,aAAO,KAAK,GAAG,OAAO;AAAA,IAC1B;AAEA,WAAO;AAAA,EACX;AAEJ;",
  "names": ["State"]
}

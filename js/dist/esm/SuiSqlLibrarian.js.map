{
  "version": 3,
  "sources": ["../../src/SuiSqlLibrarian.ts"],
  "sourcesContent": ["import type { Statement, BindParams, Database, SqlJsStatic } from \"sql.js\";\nimport initSqlJs from 'sql.js';\n\nexport type {\n    Statement,\n    BindParams,\n    Database,\n};\n\nconst isBrowser = Object.getPrototypeOf(\n    Object.getPrototypeOf(globalThis)\n  ) !== Object.prototype;\n\nconsole.log('isBrowser', isBrowser);\n\nexport default class SuiSqlLibrarian {\n\n    public isReady: boolean = false;\n    private SQLC: SqlJsStatic | null = null;\n\n    constructor() {\n    }\n\n    async getLib(): Promise<Function> {\n        if (!isBrowser) {\n            return initSqlJs;\n        } else {\n            return await this.loadScript();\n        }\n    }\n\n    async loadScript(): Promise<Function> {\n        if (window.initSqlJs) {\n            return window.initSqlJs;\n        }\n\n        const promise = new Promise((res)=>{\n            const imported = document.createElement('script');\n            imported.src = 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/sql-wasm-debug.js';\n            imported.setAttribute(\"type\", \"text/javascript\");\n            document.head.appendChild(imported);\n            imported.onload = () => {\n                res(window.initSqlJs);\n            };\n        });\n\n        return ((await promise) as Function);\n    }\n\n    async init(): Promise<boolean> {\n        if (this.SQLC && this.isReady) {\n            return true;\n        }\n\n        const initSqlJsFunction = await this.getLib();\n        if (isBrowser) {\n            const SQLC: SqlJsStatic = await initSqlJsFunction({\n                locateFile: (file: string) =>\n                    `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.12.0/${file}`,\n            });\n            this.SQLC = SQLC;\n            this.isReady = true;\n        } else {\n            const SQLC: SqlJsStatic = await initSqlJsFunction({\n            });\n            this.SQLC = SQLC;\n            this.isReady = true;\n        }\n\n        return true;\n    }\n\n    fromBinarySync(binary: Uint8Array): Database | null {\n        if (this.isReady && this.SQLC) {\n            return new (this.SQLC.Database)(binary);\n        }\n        return null;        \n    }\n\n    async fromBinary(binary?: Uint8Array): Promise<Database | null> {\n        await this.init();\n        if (this.isReady && this.SQLC) {\n            if (binary) {\n                return new (this.SQLC.Database)(binary);\n            } else {\n                return new (this.SQLC.Database)();\n            }\n        } \n    \n        return null;\n    }\n}"],
  "mappings": ";;;AACA,OAAO,eAAe;AAQtB,MAAM,YAAY,OAAO;AAAA,EACrB,OAAO,eAAe,UAAU;AAClC,MAAM,OAAO;AAEf,QAAQ,IAAI,aAAa,SAAS;AAElC,MAAO,gBAA8B;AAAA,EAKjC,cAAc;AAHd,wBAAO,WAAmB;AAC1B,wBAAQ,QAA2B;AAAA,EAGnC;AAAA,EAEA,MAAM,SAA4B;AAC9B,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX,OAAO;AACH,aAAO,MAAM,KAAK,WAAW;AAAA,IACjC;AAAA,EACJ;AAAA,EAEA,MAAM,aAAgC;AAClC,QAAI,OAAO,WAAW;AAClB,aAAO,OAAO;AAAA,IAClB;AAEA,UAAM,UAAU,IAAI,QAAQ,CAAC,QAAM;AAC/B,YAAM,WAAW,SAAS,cAAc,QAAQ;AAChD,eAAS,MAAM;AACf,eAAS,aAAa,QAAQ,iBAAiB;AAC/C,eAAS,KAAK,YAAY,QAAQ;AAClC,eAAS,SAAS,MAAM;AACpB,YAAI,OAAO,SAAS;AAAA,MACxB;AAAA,IACJ,CAAC;AAED,WAAS,MAAM;AAAA,EACnB;AAAA,EAEA,MAAM,OAAyB;AAC3B,QAAI,KAAK,QAAQ,KAAK,SAAS;AAC3B,aAAO;AAAA,IACX;AAEA,UAAM,oBAAoB,MAAM,KAAK,OAAO;AAC5C,QAAI,WAAW;AACX,YAAM,OAAoB,MAAM,kBAAkB;AAAA,QAC9C,YAAY,CAAC,SACT,wDAAwD,IAAI;AAAA,MACpE,CAAC;AACD,WAAK,OAAO;AACZ,WAAK,UAAU;AAAA,IACnB,OAAO;AACH,YAAM,OAAoB,MAAM,kBAAkB,CAClD,CAAC;AACD,WAAK,OAAO;AACZ,WAAK,UAAU;AAAA,IACnB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,QAAqC;AAChD,QAAI,KAAK,WAAW,KAAK,MAAM;AAC3B,aAAO,IAAK,KAAK,KAAK,SAAU,MAAM;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,WAAW,QAA+C;AAC5D,UAAM,KAAK,KAAK;AAChB,QAAI,KAAK,WAAW,KAAK,MAAM;AAC3B,UAAI,QAAQ;AACR,eAAO,IAAK,KAAK,KAAK,SAAU,MAAM;AAAA,MAC1C,OAAO;AACH,eAAO,IAAK,KAAK,KAAK,SAAU;AAAA,MACpC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../src/SuiSqlWalrus.ts"],
  "sourcesContent": ["\n// import { BlobEncoder } from '@mysten/walrus-wasm';\n\n// import type { SuiClient } from '@mysten/sui/client';\n\n\nimport type { Signer } from '@mysten/sui/cryptography';\n\nimport { getFullnodeUrl } from '@mysten/sui/client';\n\n// import { WalrusClient } from \"./walrusSdk2\";\n// import type { WalrusClient } from '@mysten/walrus';\nimport SuiSqlLog from './SuiSqlLog';\n\nimport type { WalrusClient } from '@mysten/walrus';\n\nimport { blobIdIntFromBytes, blobIdToInt } from './SuiSqlUtils';\n\nexport type SuiSqlWalrusWalrusClient = WalrusClient;\n\ntype SuiSqlWalrusParams = {\n    walrusClient?: WalrusClient,\n    signer?: Signer,\n    network?: string,\n\n    walrusWasmUrl?: string,      // need it for blobId calculation, if no walrusClient is provided\n};\n\n\nconst N_SHARDS = 1000; // https://github.com/MystenLabs/ts-sdks/blob/main/packages/walrus/src/constants.ts\n                       // systemObjectId -> dynamicField ( SystemStateInnerV1 ) -> fields -> committee -> n_shards\n\nexport default class SuiSqlWalrus {\n    private signer?: Signer;\n    private network: string = 'testnet';\n\n    private walrusClient?: WalrusClient;\n\n    constructor(params: SuiSqlWalrusParams) {\n        // this.suiClient = params.suiClient;\n        this.signer = params.signer;\n\n        // const walrusClient = new WalrusClient({\n        //     network: 'testnet',\n        //     suiClient: this.suiClient,\n        //     storageNodeClientOptions: {\n        //         fetch: (url, options) => {\n        //             console.log('fetching', url);\n        //             return fetch(url, options);\n        //         },\n        //         timeout: 60_000,\n        //     },\n        //     // packageConfig: {\n        //     //     packageId: '0x795ddbc26b8cfff2551f45e198b87fc19473f2df50f995376b924ac80e56f88b',\n        //     //     latestPackageId: '0x261b2e46428a152570f9ac08972d67f7c12d62469ccd381a51774c1df7a829ca',\n        //     //     systemObjectId: '0x98ebc47370603fe81d9e15491b2f1443d619d1dab720d586e429ed233e1255c1',\n        //     //     stakingPoolId: '0x20266a17b4f1a216727f3eef5772f8d486a9e3b5e319af80a5b75809c035561d',\n        //     //     walPackageId: '0x8190b041122eb492bf63cb464476bd68c6b7e570a4079645a8b28732b6197a82',\n        //     // },\n        // });\n\n        if (params.walrusClient) {\n            this.walrusClient = params.walrusClient;\n        } else if (params.network) {\n            this.network = params.network;\n            const rpcUrl = getFullnodeUrl(this.network as any);\n            // this.walrusClient = new WalrusClient({\n            //     network: (this.network as any),\n            //     suiRpcUrl: rpcUrl,\n            //     wasmUrl: params.walrusWasmUrl,\n            // });\n        } else {\n            throw new Error('No walrusClient or network provided for SuiSqlWalrus, can not initialize walrus connection');\n        }\n    }\n\n    // static async calculateBlobId(data: Uint8Array): Promise<bigint | null> {\n    //     if (!this.walrusClient) {\n    //         return null;\n    //     }\n\n    //     const { blobId } = await this.walrusClient.encodeBlob(data);\n    //     return blobId;\n\n    //     return null;\n    // }\n\n    async calculateBlobId(data: Uint8Array): Promise<bigint | null> {\n        if (!this.walrusClient) {\n            return null;\n        }\n\n        const { blobId } = await this.walrusClient.encodeBlob(data);\n        \n        if (blobId) {\n            return blobIdToInt(blobId);\n        }\n\n        return null;\n    }\n\n    async write(data: Uint8Array): Promise<string | null> {\n        if (!this.walrusClient || !this.signer) {\n            return null;\n        }\n\n        SuiSqlLog.log('wrining blob to walrus', data);\n\n        const { blobId } = await this.walrusClient.writeBlob({\n            blob: data,\n            deletable: true,\n            epochs: 3,\n            signer: this.signer,\n            owner: this.signer.toSuiAddress(),\n            attributes: undefined,\n        });\n\n        SuiSqlLog.log('walrus write success', blobId);\n\n        return blobId;\n    }\n\n    async read(blobId: string): Promise<Uint8Array | null> {\n        SuiSqlLog.log('reading blob from walrus', blobId);\n\n        const data = await this.walrusClient?.readBlob({ blobId: blobId });\n\n        if (data) {\n            SuiSqlLog.log('walrus read success', data);\n            return data;\n        }\n\n        return null;\n    }\n}"],
  "mappings": ";;;AAQA,SAAS,sBAAsB;AAI/B,OAAO,eAAe;AAItB,SAA6B,mBAAmB;AAahD,MAAM,WAAW;AAGjB,MAAO,aAA2B;AAAA,EAM9B,YAAY,QAA4B;AALxC,wBAAQ;AACR,wBAAQ,WAAkB;AAE1B,wBAAQ;AAIJ,SAAK,SAAS,OAAO;AAqBrB,QAAI,OAAO,cAAc;AACrB,WAAK,eAAe,OAAO;AAAA,IAC/B,WAAW,OAAO,SAAS;AACvB,WAAK,UAAU,OAAO;AACtB,YAAM,SAAS,eAAe,KAAK,OAAc;AAAA,IAMrD,OAAO;AACH,YAAM,IAAI,MAAM,4FAA4F;AAAA,IAChH;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,gBAAgB,MAA0C;AAC5D,QAAI,CAAC,KAAK,cAAc;AACpB,aAAO;AAAA,IACX;AAEA,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,aAAa,WAAW,IAAI;AAE1D,QAAI,QAAQ;AACR,aAAO,YAAY,MAAM;AAAA,IAC7B;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,MAAM,MAA0C;AAClD,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,QAAQ;AACpC,aAAO;AAAA,IACX;AAEA,cAAU,IAAI,0BAA0B,IAAI;AAE5C,UAAM,EAAE,OAAO,IAAI,MAAM,KAAK,aAAa,UAAU;AAAA,MACjD,MAAM;AAAA,MACN,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ,KAAK;AAAA,MACb,OAAO,KAAK,OAAO,aAAa;AAAA,MAChC,YAAY;AAAA,IAChB,CAAC;AAED,cAAU,IAAI,wBAAwB,MAAM;AAE5C,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,KAAK,QAA4C;AACnD,cAAU,IAAI,4BAA4B,MAAM;AAEhD,UAAM,OAAO,MAAM,KAAK,cAAc,SAAS,EAAE,OAAe,CAAC;AAEjE,QAAI,MAAM;AACN,gBAAU,IAAI,uBAAuB,IAAI;AACzC,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
